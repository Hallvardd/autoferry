# Code adapted from Tensorflow Object Detection Framework
# https://github.com/tensorflow/models/blob/master/research/object_detection/object_detection_tutorial.ipynb
# Tensorflow Object Detection Detector

import numpy as np
import tensorflow as tf
import cv2
import time
import os


class DetectorAPI:
    def __init__(self, path_to_ckpt):
        self.path_to_ckpt = path_to_ckpt

        self.detection_graph = tf.Graph()
        with self.detection_graph.as_default():
            od_graph_def = tf.GraphDef()
            with tf.gfile.GFile(self.path_to_ckpt, 'rb') as fid:
                serialized_graph = fid.read()
                od_graph_def.ParseFromString(serialized_graph)
                tf.import_graph_def(od_graph_def, name='')

        self.default_graph = self.detection_graph.as_default()
        self.sess = tf.Session(graph=self.detection_graph)

        # Definite input and output Tensors for detection_graph
        self.image_tensor = self.detection_graph.get_tensor_by_name('image_tensor:0')
        # Each box represents a part of the image where a particular object was detected.
        self.detection_boxes = self.detection_graph.get_tensor_by_name('detection_boxes:0')
        # Each score represent how level of confidence for each of the objects.
        # Score is shown on the result image, together with the class label.
        self.detection_scores = self.detection_graph.get_tensor_by_name('detection_scores:0')
        self.detection_classes = self.detection_graph.get_tensor_by_name('detection_classes:0')
        self.num_detections = self.detection_graph.get_tensor_by_name('num_detections:0')

    def processFrame(self, image):
        # Expand dimensions since the trained_model expects images to have shape: [1, None, None, 3]
        image_np_expanded = np.expand_dims(image, axis=0)
        # Actual detection.
        start_time = time.time()
        (boxes, scores, classes, num) = self.sess.run(
            [self.detection_boxes, self.detection_scores, self.detection_classes, self.num_detections],
            feed_dict={self.image_tensor: image_np_expanded})
        end_time = time.time()

        print("Elapsed Time:", end_time-start_time)

        im_height, im_width,_ = image.shape
        boxes_list = [None for i in range(boxes.shape[1])]
        for i in range(boxes.shape[1]):
            boxes_list[i] = (int(boxes[0,i,0] * im_height),
                        int(boxes[0,i,1]*im_width),
                        int(boxes[0,i,2] * im_height),
                        int(boxes[0,i,3]*im_width))

        return boxes_list, scores[0].tolist(), [int(x) for x in classes[0].tolist()], int(num[0])

    def start(self):
        """
        Used to initialize the class since  pyhton doesn't initialize a
        class before a method is called
        """
        print('Starting!!')


    def close(self):
        self.sess.close()
        self.default_graph.close()

if __name__ == "__main__":
    start_time = time.clock()
    run_time = time.clock()
    fps = 10
    model_path = '/home/hallvard/gcvenv/test/faster_rcnn_inception_v2_coco_2018_01_28/frozen_inference_graph.pb'
    model_path2 = '/faster_rcnn_inception_v2_coco_2018_01_28/frozen_inference_graph.pb'
    video_path = '/home/hallvard/Videos/TownCentreXVID.avi'
    odapi = DetectorAPI(path_to_ckpt=model_path)
    threshold = 0.7

    print("PATH == :" + model_path2)

    # Use video:
    # cap = cv2.VideoCapture(video_path)

    # Use webcam
    cap = cv2.VideoCapture(0)

    # Use ip-cam
    #cap = cv2.VideoCapture('rtsp://admin:autogruppe4@192.168.0.100//Streaming/Channels/101')

    cap.set(cv2.CAP_PROP_FPS, fps)
    cap.set(cv2.CAP_PROP_BUFFERSIZE,1)
    while True:
        r, img = cap.read()
        #img = cv2.resize(img, (1280, 720))

        # Visualization of the results of a detection.
        number_of_humans = 0
        if run_time-start_time > 10.0:
            boxes, scores, classes, num = odapi.processFrame(img)
            for i in range(len(boxes)):
                # Class 1 represents human,
                # Class 2 represents bicycle,
                # Class 18 represents dog,
                # Class 33 represents suitcase
                if (classes[i] == 1) and (scores[i] > threshold):
                    box = boxes[i]
                    number_of_humans += 1
                    cv2.rectangle(img,(box[1],box[0]),(box[3],box[2]),(255,0,0),2)
                elif (classes[i] == 2) and (scores[i] > threshold):
                    box = boxes[i]
                    cv2.rectangle(img,(box[1],box[0]),(box[3],box[2]),(0,255,0),2)
                elif classes[i] == 18 and scores[i] > threshold:
                    box = boxes[i]
                    cv2.rectangle(img,(box[1],box[0]),(box[3],box[2]),(0,0,255),2)

        else:
            run_time = run_time = time.clock()


        cv2.imshow("preview", img)
        key = cv2.waitKey(1)
        if key & 0xFF == ord('q'):
            break

    # TODO find the middle of the rectangle.
        # find a way of knowing how the box moves
            # use a kalman filter, with a model of human movement.
            # Dissapearing boxes.
            # Dynamic way of finding the history of the boxes.
            # Person class.
                # ID pos
    # find when a rectangle crosses the line.
    # implement a buffer zone where the counting happens
    # method for.
